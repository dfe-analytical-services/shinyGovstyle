% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/contents_links.R
\name{contents_links}
\alias{contents_links}
\title{Contents link function}
\usage{
contents_links(link_text, input_id, ...)
}
\arguments{
\item{link_text}{vector of link text for subcontents}

\item{input_id}{button id}

\item{...}{arg to pass shinygovstyle::subcontents_links}
}
\value{
an action button html shiny object
}
\description{
This function creates an action link to nav between tabs.
}
\examples{
if (interactive()) {
  ui <- shiny::fluidPage(
    shinyGovstyle::header(
      main_text = "Example",
      secondary_text = "User Examples",
      logo = "shinyGovstyle/images/moj_logo.png"
    ),
    shiny::column(
      width = 3,
      id = "nav",
      shiny::tags$div(
        id = "govuk-contents-box",
        class = "govuk-contents-box",
        shiny::tags$h2("Contents"),
        contents_links("Select Types", "select_types_button", subcontents_links(
          c("radio_button_Input (inline)", "button_Input")
        )),
        contents_links("Text Types", "text_types_button", subcontents_links(
          c("date_Input", "button_Input"),
          c(NA, "button_input_text_types")
        ))
      )),

    shiny::column(
      width = 9,
      shiny::tabsetPanel(
        type = "hidden",
        id = "tab-container",
        shiny::tabPanel(
          "Select Types",
          value = "select_types",
          gov_layout(
            size = "two-thirds",
            heading_text("Select Types", size = "l"),
            heading_text("radio_button_Input (inline)", size = "s"),
            heading_text("button_Input", size = "s"),
          )
        ),
        shiny::tabPanel(
          "Text Types",
          value = "text_types",
          gov_layout(
            size = "two-thirds",
            heading_text("Page 2", size = "l"),
            heading_text("date_Input", size = "s"),
            heading_text("button_Input", size = "s", id = "button_input_text_types"),
          )))))

  server <- function(input, output, session) {
  }
  shiny::shinyApp(ui = ui, server = server)
}
}
