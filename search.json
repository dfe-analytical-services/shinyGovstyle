[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ross Wyatt. Author, maintainer. Cameron Race. Contributor. Sarah Wong. Contributor. Richard Bielby. Contributor. Charlotte Foster. Contributor. Jeni Martin. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wyatt R (2024). shinyGovstyle: Custom Gov Style Inputs Shiny. R package version 0.1.0.9000, https://github.com/moj-analytical-services/shinyGovstyle.","code":"@Manual{,   title = {shinyGovstyle: Custom Gov Style Inputs for Shiny},   author = {Ross Wyatt},   year = {2024},   note = {R package version 0.1.0.9000},   url = {https://github.com/moj-analytical-services/shinyGovstyle}, }"},{"path":"/index.html","id":"shinygovstyle-","dir":"","previous_headings":"","what":"Custom Gov Style Inputs for Shiny","title":"Custom Gov Style Inputs for Shiny","text":"Apply Gov styled components formats shiny","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Custom Gov Style Inputs for Shiny","text":"package provides custom widgets style app like gov.uk. variety widgets available, including select, radio, checkboxes well styling headers footers. view details gov.uk components please visit https://design-system.service.gov.uk/. components https://design-system.service.gov.uk/components/ available use package. Installation : also available conda want make use development use error word count elements need load useShinyjs shinyjs UI:","code":"install.packages(\"shinyGovstyle\") conda install r-shinygovstyle remotes::install_github(\"moj-analytical-services/shinyGovstyle\") shinyjs::useShinyjs()"},{"path":"/index.html","id":"components-available-","dir":"","previous_headings":"","what":"Components available :","title":"Custom Gov Style Inputs for Shiny","text":"Gov style layout Banner Contents links Header text Radio button Checkbox Button Select Date File input Text input Text area input Warning Insert text Value box Details Panel Notification Banner Accordion Table Tabs Summary List Cookie Banner Skip main Tags Error Example Version","code":""},{"path":"/index.html","id":"gov-style-layout","dir":"","previous_headings":"Components available :","what":"Gov style layout","title":"Custom Gov Style Inputs for Shiny","text":"Create gov style look page header, footer, font layout: Note: can use gov.uk font service.gov.uk (see https://design-system.service.gov.uk/styles/typography/)","code":"ui <- fluidPage(   #font(),   shinyGovstyle::header(\"Justice\", \"Prototype\", logo=\"shinyGovstyle/images/moj_logo.png\"),   gov_layout(size = \"full\",         tags$br(),         tags$br(),         tags$br(),         tags$br(),         tags$br()       ),   footer(TRUE) )  server <- function(input, output, session) {}"},{"path":"/index.html","id":"banner","dir":"","previous_headings":"Components available :","what":"Banner","title":"Custom Gov Style Inputs for Shiny","text":"Add banner header state beta alpha :","code":"ui <- fluidPage(   shinyGovstyle::header(\"Justice\", \"Prototype\", logo=\"shinyGovstyle/images/moj_logo.png\"),   banner(\"banner\", \"beta\", 'This is a new service – your <a class=\"govuk-link\" href=\"#\">feedback<\/a> will help us to improve it.'),   gov_layout(size = \"full\",         tags$br(),         tags$br(),         tags$br(),         tags$br(),         tags$br()       ),   footer(TRUE) )  server <- function(input, output, session) {}"},{"path":"/index.html","id":"contents-links","dir":"","previous_headings":"Components available :","what":"Contents links","title":"Custom Gov Style Inputs for Shiny","text":"Create contents subcontents links sidebar navigate page.  Important: contents_link() requires following UI structure enable js work relies IDs section point users focus . can also found run_example(): can create content links without subcontents links: subcontents links: use subcontents_text_list without specifying subcontents_id_list subcontents links automatically link shinyGovstyle::heading_text() elements header label matches subcontents_text_list label. Use subcontents_id_list link subcontents link shinyGovstyle::heading_text() custom id argument. order needs match subcontents_text_list. Add NA vector subcontents links still want use automatic link id . Contents links need shiny::observeEvent() server switch tabset panels. Subcontents links work automatically need shiny::observeEvent() server.","code":"shiny::fluidpage(   shinygovstyle::header(     main_text = \"example\",     secondary_text = \"user examples\",     logo = \"shinygovstyle/images/moj_logo.png\"   ),   gov_row(     shiny::column(       width = 3,       id = \"nav\", # DO NOT REMOVE ID       shiny::tags$div(         id = \"govuk-contents-box\", # DO NOT REMOVE ID        class = \"govuk-contents-box\",  # DO NOT REMOVE CLASS         shiny::tags$h2(\"contents\"),          # CONTENTS LINKS GO HERE         )       ),       shiny::column(         width = 9,         id = \"main-col\", # DO NOT REMOVE ID         shiny::tabsetpanel(         type = \"hidden\",         id = \"tab-container\", # DO NOT REMOVE ID          # TAB PANELS GO HERE         )       )   ) ) contents_link(   link_text = \"Cookies\",   input_id = \"cookies_button\") contents_link(   link_text = \"Feedback types\",   input_id = \"feedback_types_button\",   subcontents_text_list =  c(\"tag_Input\", \"details\")) contents_link(   link_text = \"Tables, tabs and accordions\",   input_id = \"tables_tabs_and_accordions_button\",   subcontents_text_list = c(\"govTable\", \"govTabs\", \"button_Input\"),   subcontents_id_list = c(NA, NA, \"button_input_tables_tabs_accordions\") ) ui <- shiny::fluidPage(   shinyGovstyle::header(     main_text = \"Example\",     secondary_text = \"User Examples\",     logo = \"shinyGovstyle/images/moj_logo.png\"   ),   gov_row(     shiny::column(       width = 3,       id = \"nav\", # DO NOT REMOVE ID        shiny::tags$div( # DO NOT REMOVE DIV         shiny::tags$h2(\"Contents\"),         contents_link(           \"Tables, tabs and accordions\",           \"tables_tabs_and_accordions_button\",         ),         contents_link(\"Feedback types\", \"feedback_types_button\"),       )     ),     shiny::column(       width = 9,       id = \"main_col\", # DO NOT REMOVE ID       shiny::tabsetPanel(         type = \"hidden\",         id = \"tab-container\", # DO NOT REMOVE ID          shiny::tabPanel(           \"Tables, tabs and accordions\",           value = \"tables_tabs_and_accordions\",           gov_layout(size = \"Tables, tabs and accordions\",                      heading_text(\"Tables, tabs and accordions\", size = \"l\"))         ),          shiny::tabPanel(           \"Feedback Types\",           value = \"feedback_types\",           gov_layout(size = \"two-thirds\",                      heading_text(\"Feedback types\", size = \"l\"))         ),       )      )   ) )  server <- function(input, output, session) {   shiny::observeEvent(input$tables_tabs_and_accordions_button, {     shiny::updateTabsetPanel(session, \"tab-container\", selected = \"tables_tabs_and_accordions\")   })    shiny::observeEvent(input$feedback_types_button, {     shiny::updateTabsetPanel(session, \"tab-container\", selected = \"feedback_types\")   })  } shiny::shinyApp(ui = ui, server = server) }"},{"path":"/index.html","id":"heading-text","dir":"","previous_headings":"Components available :","what":"Heading text","title":"Custom Gov Style Inputs for Shiny","text":"Use heading text create headings.  can adjust text size setting size ‘xl’, ‘l’, ‘m’, ‘s’. size defaults ‘xl’. can use id create custom id link subcontents_id_list shinyGovstyle::contents_link. can helpful identically named headings.","code":"heading_text(text_input = \"I am the default extra large text\", size = \"xl\"), heading_text(text_input = \"I am large text\", size = \"l\"), heading_text(text_input = \"I am medium text\", size = \"m\"), heading_text(text_input = \"I am small text\", size = \"s\") heading_text(text_input = \"I am the default extra large text\", id = \"custom_id\")"},{"path":"/index.html","id":"radio-button","dir":"","previous_headings":"Components available :","what":"Radio button","title":"Custom Gov Style Inputs for Shiny","text":"Create gov style radio button :","code":"radio_button_Input(inputId = \"name_changed\", label = \"Have you changed your name?\",                    choices= c(\"Yes\", \"No\"), inline = TRUE,                    hint_label = \"This includes changing your last name or spelling your name differently.\")"},{"path":"/index.html","id":"checkbox","dir":"","previous_headings":"Components available :","what":"Checkbox","title":"Custom Gov Style Inputs for Shiny","text":"Turn checkboxes gov style ones : Note currently access values separately inputIds supply values main inputID.","code":"checkbox_Input(   inputId = \"checkID\",    cb_labels = c(\"Waste from animal carcasses\", \"Waste from mines or quarries\", \"Farm or agricultural waste\"),   checkboxIds = c(\"op1\", \"op2\", \"op3\"),   label = \"Which types of waste do you transport?\",   hint_label = \"Select all that apply.\")"},{"path":"/index.html","id":"button","dir":"","previous_headings":"Components available :","what":"Button","title":"Custom Gov Style Inputs for Shiny","text":"Gov style button different styles :","code":"shinyGovstyle::button_Input(inputId = \"btn1\", label = \"default\"), shinyGovstyle::button_Input(inputId = \"btn1\", label = \"start\", type = \"start\"), shinyGovstyle::button_Input(inputId = \"btn1\", label = \"secondary\", type = \"secondary\"), shinyGovstyle::button_Input(inputId = \"btn1\", label = \"warning\", type = \"warning\")"},{"path":"/index.html","id":"select","dir":"","previous_headings":"Components available :","what":"Select","title":"Custom Gov Style Inputs for Shiny","text":"Gov style drop select :","code":"shinyGovstyle::select_Input(   inputId = \"sorter\",    label = \"Sort by\",   select_text = c(\"Recently published\", \"Recently updated\", \"Most views\", \"Most comments\"),   select_value = c(\"published\", \"updated\", \"view\", \"comments\"))"},{"path":"/index.html","id":"date","dir":"","previous_headings":"Components available :","what":"Date","title":"Custom Gov Style Inputs for Shiny","text":"Gov style date input : Note currently access individual values adding affix _day, _month _year full date dd/mm/yy using inputID.","code":"date_Input(   inputId = \"date1\",   label = \"What is your date of birth?\",   hint_label = \"For example, 31 3 1980\")"},{"path":"/index.html","id":"file-input","dir":"","previous_headings":"Components available :","what":"File input","title":"Custom Gov Style Inputs for Shiny","text":"Gov style file input component :","code":"file_Input(inputId = \"file1\", label = \"Upload a file\")"},{"path":"/index.html","id":"text-input","dir":"","previous_headings":"Components available :","what":"Text input","title":"Custom Gov Style Inputs for Shiny","text":"Gov style text input component :","code":"text_Input(inputId = \"txt1\", label = \"Event name\")"},{"path":"/index.html","id":"text-area-input","dir":"","previous_headings":"Components available :","what":"Text area input","title":"Custom Gov Style Inputs for Shiny","text":"Gov style text area input component : can also add word count options, requires additional argument server :","code":"text_area_Input(   inputId = \"text_area\",   label = \"Can you provide more detail?\",   hint_label = \"Do not include personal or financial information, like your National Insurance number or credit card details.\") ui <- fluidPage(   shinyjs::useShinyjs(),   shinyGovstyle::header(\"Justice\", \"\", logo=\"shinyGovstyle/images/moj_logo.png\"),   gov_layout(size = \"full\",         text_area_Input(           inputId = \"text_area\",           label = \"Can you provide more detail?\",           hint_label =  \"Do not include personal or financial information, like                           your National Insurance number or credit card details.\",           word_limit = 300)   ),   footer(TRUE) )  # Define server logic required to draw a histogram server <- function(input, output, session) {   observeEvent(input$text_area,     word_count(inputId = \"text_area\", input = input$text_area, word_limit = 300)   ) }"},{"path":"/index.html","id":"warning","dir":"","previous_headings":"Components available :","what":"Warning","title":"Custom Gov Style Inputs for Shiny","text":"Gov style warning component :","code":"warning_text(inputId = \"warn\", text = \"You can be fined up to £5,000 if you do not register.\")"},{"path":"/index.html","id":"insert-text","dir":"","previous_headings":"Components available :","what":"Insert text","title":"Custom Gov Style Inputs for Shiny","text":"Gov style insert text component :","code":"insert_text(inputId = \"insertId\",             text = \"It can take up to 8 weeks to register a lasting power of attorney                      if there are no mistakes in the application.\")"},{"path":"/index.html","id":"value-box","dir":"","previous_headings":"Components available :","what":"Value box","title":"Custom Gov Style Inputs for Shiny","text":"Gov style value box component :","code":"value_text(   inputId = \"valueId\",   value = \"1,000,000\",   text = \"This is the latest value for the selected inputs.\",   colour = \"purple\" )"},{"path":"/index.html","id":"details","dir":"","previous_headings":"Components available :","what":"Details","title":"Custom Gov Style Inputs for Shiny","text":"Gov style details component :","code":"details(   inputId = \"detID\",   label = \"Help with nationality\",   help_text = \"We need to know your nationality so we can work out which elections you’re                entitled to vote in. If you cannot provide your nationality, you’ll have to                send copies of identity documents through the post.\")"},{"path":"/index.html","id":"panel","dir":"","previous_headings":"Components available :","what":"Panel","title":"Custom Gov Style Inputs for Shiny","text":"Gov style panel component :","code":"panel_output(   inputId = \"panId\",    main_text = \"Application complete\",    sub_text = \"Your reference number <br> <strong>HDJ2123F<\/strong>\")"},{"path":"/index.html","id":"notification-banner","dir":"","previous_headings":"Components available :","what":"Notification Banner","title":"Custom Gov Style Inputs for Shiny","text":"Gov style panel component :","code":"noti_banner(   \"notId\",   title_txt = \"Important\",   body_txt = Example text,   type = \"standard\" )"},{"path":"/index.html","id":"accordion","dir":"","previous_headings":"Components available :","what":"Accordion","title":"Custom Gov Style Inputs for Shiny","text":"Gov style accordion component :","code":"accordion(       \"acc1\",       c(\"Writing well for the web\",         \"Writing well for specialists\",         \"Know your audience\",         \"How people read\"        ),       c(\"This is the content for Writing well for the web.\",         \"This is the content for Writing well for specialists.\",         \"This is the content for Know your audience.\",         \"This is the content for How people read.\"        ))"},{"path":"/index.html","id":"table","dir":"","previous_headings":"Components available :","what":"Table","title":"Custom Gov Style Inputs for Shiny","text":"Gov style table component :","code":"Months <- c(\"January\", \"February\", \"March\") Bikes <- c(\"£85\", \"£75\", \"£165\") Cars <- c(\"£95\", \"£55\", \"£125\") example_data <- data.frame(Months, Bikes, Cars)  shinyGovstyle::govTable(       \"tab1\", example_data, \"Test\", \"l\", num_col = c(2,3),       width_overwrite = c(\"one-half\", \"one-quarter\", \"one-quarter\"))"},{"path":"/index.html","id":"tabs","dir":"","previous_headings":"Components available :","what":"Tabs","title":"Custom Gov Style Inputs for Shiny","text":"Gov style tabs component :","code":"# Create an example dataset   tabs <- c(rep(\"Past Day\", 3),             rep(\"Past Week\", 3),             rep(\"Past Month\", 3),             rep(\"Past Year\", 3))   Case_manager <- rep(c(\"David Francis\", \"Paul Farmer\", \"Rita Patel\"),4)   Cases_open <- c(3, 1, 2, 24, 16, 24, 98, 122, 126, 1380, 1129, 1539)   Cases_closed <- c(0, 0, 0, 18, 20, 27, 95, 131, 142, 1472, 1083, 1265)   data <- data.frame(tabs, Case_manager, Cases_open, Cases_closed)    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::govTabs(\"tabsID\", data, \"tabs\")),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server)"},{"path":"/index.html","id":"summary-list","dir":"","previous_headings":"Components available :","what":"Summary List","title":"Custom Gov Style Inputs for Shiny","text":"Gov style summary list :","code":"# Create an example dataset   headers <- c(\"Name\", \"Date of birth\", \"Contact information\", \"Contact details\")   info <- c(     \"Sarah Philips\",     \"5 January 1978\",     \"72 Guild Street <br> London <br> SE23 6FH\",     \"07700 900457 <br> sarah.phillips@example.com\")    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::gov_summary(\"sumID\", headers, info, action = TRUE)),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server)"},{"path":"/index.html","id":"cookie-banner","dir":"","previous_headings":"Components available :","what":"Cookie Banner","title":"Custom Gov Style Inputs for Shiny","text":"Gov style cookie banner :","code":"ui <- fluidPage(   shinyGovstyle::header(     main_text = \"Example\",     secondary_text = \"User Examples\",     logo=\"shinyGovstyle/images/moj_logo.png\"),   #Needs shinyjs to work   shinyjs::useShinyjs(),   shinyGovstyle::cookieBanner(\"The best thing\"),   shinyGovstyle::gov_layout(size = \"two-thirds\"),   shinyGovstyle::footer(full = TRUE) )  server <- function(input, output, session) {    #Need these set of observeEvent to create a path through the cookie banner   observeEvent(input$cookieAccept, {     shinyjs::show(id = \"cookieAcceptDiv\")     shinyjs::hide(id = \"cookieMain\")   })    observeEvent(input$cookieReject, {     shinyjs::show(id = \"cookieRejectDiv\")     shinyjs::hide(id = \"cookieMain\")   })    observeEvent(input$hideAccept, {     shinyjs::toggle(id = \"cookieDiv\")   })    observeEvent(input$hideReject, {     shinyjs::toggle(id = \"cookieDiv\")   })    observeEvent(input$cookieLink, {     #Need to link here to where further info is located.  You can     #updateTabsetPanel to have a cookie page for instance   })  } shinyApp(ui = ui, server = server)"},{"path":"/index.html","id":"skip-to-main","dir":"","previous_headings":"Components available :","what":"Skip to main","title":"Custom Gov Style Inputs for Shiny","text":"Add accessible ‘Skip main content’ link typically used keyboard-users bypass content navigate directly main content page. visible users ‘tabbing’ feature, otherwise hidden:  Important: main column need id “main_col” work feature generally positioned cookie banner header. See example :","code":"ui <- fluidPage(   cookieBanner(\"Run Example\"),   skip_to_main(),   shinyGovstyle::header(     main_text = \"Example\",     secondary_text = \"User Examples\",     logo=\"shinyGovstyle/images/moj_logo.png\"   ),   shinyjs::useShinyjs(),  # shinyjs is needed to manage visibility of elements   gov_row(     shiny::column(       width = 3,       id = \"nav\",        # Contents box       shiny::tags$div(         id = \"govuk-contents-box\", #DO NOT REMOVE ID         class = \"govuk-contents-box\",  #DO NOT REMOVE CLASS         shiny::tags$h2(\"Contents\"),         p(\"Your contents links go here\"),       )     ),      shiny::column(       width = 9,       id = \"main_col\",       shiny::tabsetPanel(         type = \"hidden\",         id = \"tab-container\", # DO NOT REMOVE ID         shiny::tabPanel(           \"Your main content\",           value = \"your_main_content\",           gov_layout(             size = \"two-thirds\",             heading_text(\"Your main content\", size = \"l\"),             p(\"Your main content goes here\")            )         )       )     )    ) ) server <- function(input, output, session){ } shinyApp(ui = ui, server = server)"},{"path":"/index.html","id":"tags","dir":"","previous_headings":"Components available :","what":"Tags","title":"Custom Gov Style Inputs for Shiny","text":"Add gov style tag component :","code":"tag_Input(inputId = \"tag1\", text = \"Default\"), tag_Input(inputId = \"tag2\", text = \"Grey\", colour = \"grey\"), tag_Input(inputId = \"tag3\", text = \"Green\", colour = \"green\"), tag_Input(inputId = \"tag4\", text = \"Turquoise\", colour = \"turquoise\"), tag_Input(inputId = \"tag5\", text = \"Blue\", colour = \"blue\"), tag_Input(inputId = \"tag6\", text = \"Light-blue\", colour = \"light-blue\"), tag_Input(inputId = \"tag7\", text = \"Purple\", colour = \"purple\"), tag_Input(inputId = \"tag8\", text = \"Pink\", colour = \"pink\"), tag_Input(inputId = \"tag9\", text = \"Red\", colour = \"red\"), tag_Input(inputId = \"tag10\", text = \"Orange\", colour = \"orange\"), tag_Input(inputId = \"tag11\", text = \"Yellow\", colour = \"yellow\")"},{"path":"/index.html","id":"error","dir":"","previous_headings":"Components available :","what":"Error","title":"Custom Gov Style Inputs for Shiny","text":"Add errors components filled correctly. components option add :","code":"ui <- fluidPage(   shinyjs::useShinyjs(),   shinyGovstyle::header(\"Justice\", \"\", logo=\"shinyGovstyle/images/moj_logo.png\"),   gov_layout(size = \"full\",         text_area_Input(           \"text_area\",           \"Can you provide more detail?\",           \"Do not include personal or financial information, like your National Insurance number or credit card details.\",           word_limit = 300, error = TRUE, error_message = \"Error\"),          button_Input(\"btn1\", \"Toggle error\")   ),   footer(TRUE) )  server <- function(input, output, session) {   err <<- FALSE   observeEvent(input$btn1,{     if (err) {       err <<- FALSE       error_off(\"text_area\")     }     else {       err <<- TRUE       error_on(\"text_area\", \"You have an error\")     }   }   ) }"},{"path":"/index.html","id":"example-version","dir":"","previous_headings":"Components available :","what":"Example Version","title":"Custom Gov Style Inputs for Shiny","text":"can run example dashboard. rough improved.","code":"run_example()"},{"path":"/reference/accordion.html","id":null,"dir":"Reference","previous_headings":"","what":"Accordion Function — accordion","title":"Accordion Function — accordion","text":"function inserts accordion","code":""},{"path":"/reference/accordion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accordion Function — accordion","text":"","code":"accordion(inputId, titles, descriptions)"},{"path":"/reference/accordion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accordion Function — accordion","text":"inputId Input id accordion titles Add titles accordion descriptions Add main text accordion","code":""},{"path":"/reference/accordion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accordion Function — accordion","text":"accordion html shiny object","code":""},{"path":"/reference/accordion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accordion Function — accordion","text":"","code":"if (interactive()) {    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",     accordion(       \"acc1\",       c(\"Writing well for the web\",         \"Writing well for specialists\",         \"Know your audience\",         \"How people read\"        ),       c(\"This is the content for Writing well for the web.\",         \"This is the content for Writing well for specialists.\",         \"This is the content for Know your audience.\",         \"This is the content for How people read.\"        ))),      shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}    shinyApp(ui = ui, server = server) }"},{"path":"/reference/backlink_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Back Link Function — backlink_Input","title":"Back Link Function — backlink_Input","text":"function adds back link page","code":""},{"path":"/reference/backlink_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Back Link Function — backlink_Input","text":"","code":"backlink_Input(inputId, label = \"Back\")"},{"path":"/reference/backlink_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Back Link Function — backlink_Input","text":"inputId input slot used access value. label link text backlink, default \"Back\"","code":""},{"path":"/reference/backlink_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Back Link Function — backlink_Input","text":"backlink html shiny object","code":""},{"path":"/reference/backlink_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Back Link Function — backlink_Input","text":"","code":"if (interactive()) {   ui <- fluidPage(     header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shiny::navlistPanel(       \"\",       id=\"nav\",       widths = c(2, 10),       well = FALSE,        #Create first panel       shiny::tabPanel(         \"Select Types\",         value = \"panel1\",         gov_layout(size = \"two-thirds\",           backlink_Input(\"link1\"),           shiny::tags$br(), shiny::tags$br()        )),        shiny::tabPanel(          \"Tab2\",          value = \"panel2\")),    shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {     #Slightly confused in that it goes forward rather than back, but shows how     #to use     observeEvent(input$link1,{       updateTabsetPanel(session, \"nav\", selected = \"panel2\")     })   }   shinyApp(ui = ui, server = server) }"},{"path":"/reference/banner.html","id":null,"dir":"Reference","previous_headings":"","what":"Banner Function — banner","title":"Banner Function — banner","text":"function create detail component can click details.","code":""},{"path":"/reference/banner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Banner Function — banner","text":"","code":"banner(inputId, type, label)"},{"path":"/reference/banner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Banner Function — banner","text":"inputId input slot used access value. type Main type label e.g. alpha beta.  Can word. label test display.","code":""},{"path":"/reference/banner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Banner Function — banner","text":"banner html shiny object","code":""},{"path":"/reference/banner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Banner Function — banner","text":"","code":"if (interactive()) {    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"Beta\", 'This is a new service')   )    server <- function(input, output, session) {}    shinyApp(ui = ui, server = server) }"},{"path":"/reference/button_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Button Function — button_Input","title":"Button Function — button_Input","text":"function create gov style button","code":""},{"path":"/reference/button_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Button Function — button_Input","text":"","code":"button_Input(inputId, label, type = \"default\")"},{"path":"/reference/button_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Button Function — button_Input","text":"inputId input slot used access value. label Display label control, NULL label. type type button.  Options default, start, secondary warning.  Defaults default.","code":""},{"path":"/reference/button_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Button Function — button_Input","text":"html button shiny object","code":""},{"path":"/reference/button_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Button Function — button_Input","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::button_Input(         inputId = \"btn1\",         label = \"Continue\",         type = \"default\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/checkbox_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkbox Function — checkbox_Input","title":"Checkbox Function — checkbox_Input","text":"function inserts checkbox group","code":""},{"path":"/reference/checkbox_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkbox Function — checkbox_Input","text":"","code":"checkbox_Input(   inputId,   cb_labels,   checkboxIds,   label,   hint_label = NULL,   small = FALSE,   error = FALSE,   error_message = NULL )"},{"path":"/reference/checkbox_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkbox Function — checkbox_Input","text":"inputId Input id group checkboxes cb_labels Add names options appear checkboxIds Add values checkbox label Insert text checkbox group. hint_label Insert optional hint/secondary text.  Defaults NULL small change sizing small version checkbox.  Defaults FALSE error Whenever want include error handle component. error_message want default error message.","code":""},{"path":"/reference/checkbox_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checkbox Function — checkbox_Input","text":"checkbox html shiny object","code":""},{"path":"/reference/checkbox_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkbox Function — checkbox_Input","text":"","code":"if (interactive()) {    ui <- fluidPage(     # Required for error handling function     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",       # Simple checkbox       shinyGovstyle::checkbox_Input(         inputId = \"check1\",         cb_labels = c(\"Option 1\", \"Option 2\", \"Option 3\"),         checkboxIds = c(\"op1\", \"op2\", \"op3\"),         label = \"Choice option\"),        # Error checkbox       shinyGovstyle::checkbox_Input(         inputId = \"check2\",         cb_labels = c(\"Option 1\", \"Option 2\", \"Option 3\"),         checkboxIds = c(\"op1\", \"op2\", \"op3\"),         label = \"Choice option\",         hint_label = \"Select the best fit\",         error = TRUE,         error_message = \"Select one\"),       # Button to trigger error       shinyGovstyle::button_Input(inputId = \"submit\", label = \"Submit\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {     #'Trigger error on blank submit of eventId2     observeEvent(input$submit, {       if (is.null(input$check2)){         shinyGovstyle::error_on(inputId = \"check2\")       } else {         shinyGovstyle::error_off(inputId = \"check2\")       }     })   }    shinyApp(ui = ui, server = server) }"},{"path":"/reference/clean_heading_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean heading text function This internal function is used in subcontents_links and heading_text to create an automated link between the two — clean_heading_text","title":"Clean heading text function This internal function is used in subcontents_links and heading_text to create an automated link between the two — clean_heading_text","text":"Clean heading text function internal function used subcontents_links heading_text create automated link two","code":""},{"path":"/reference/clean_heading_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean heading text function This internal function is used in subcontents_links and heading_text to create an automated link between the two — clean_heading_text","text":"","code":"clean_heading_text(text)"},{"path":"/reference/clean_heading_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean heading text function This internal function is used in subcontents_links and heading_text to create an automated link between the two — clean_heading_text","text":"text string","code":""},{"path":"/reference/clean_heading_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean heading text function This internal function is used in subcontents_links and heading_text to create an automated link between the two — clean_heading_text","text":"string","code":""},{"path":"/reference/contents_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Contents link function — contents_link","title":"Contents link function — contents_link","text":"function creates action link nav tabs optionally link subcontents headers.","code":""},{"path":"/reference/contents_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contents link function — contents_link","text":"","code":"contents_link(link_text, input_id, subcontents_text_list, subcontents_id_list)"},{"path":"/reference/contents_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contents link function — contents_link","text":"link_text vector link text contents input_id contents button id subcontents_text_list vector link text subcontents subcontents_id_list vector link ids subcontents. missing automatically matches id shinygovstyle::heading_text","code":""},{"path":"/reference/contents_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contents link function — contents_link","text":"action button html shiny object","code":""},{"path":"/reference/contents_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contents link function — contents_link","text":"","code":"if (interactive()) {      ui <- shiny::fluidPage(      title=\"ShinyGovstyle\",        cookieBanner(\"Run Example\"),        header(\"MOJ\", \"ShinyGovstyle Example\",               logo=\"shinyGovstyle/images/moj_logo-1.png\", logo_width = 66),        banner(          \"banner\",          \"Beta\",          'This is a new service \\u002D your <a class=\"govuk-link\" href=\"#\">              feedback<\/a> will help us to improve it.'),         #Need this to make the error and word count work        shinyjs::useShinyjs(),         #Add a message to show users how to see this code        shiny::tags$br(),        shiny::markdown(          \"Run ```View(run_example)``` in console to see the code for this app\"),          gov_row(          # Nav columns          shiny::column(             width = 3,            id = \"nav\", # DO NOT REMOVE ID             # Contents box            shiny::tags$div(              id = \"govuk-contents-box\", #DO NOT REMOVE ID              class = \"govuk-contents-box\",  #DO NOT REMOVE CLASS               shiny::tags$h2(\"Contents\"),               # Text types tab              contents_link(                \"Text Types\",                \"text_types_button\",                subcontents_text_list = c(\"date_Input\",                \"text_Input\",                \"text_area_Input\",                \"button_Input\"),                subcontents_id_list = c(NA, NA, NA, \"button_input_text_types\")              ),               # Tables tabs and accordions tab              contents_link(                \"Tables, tabs and accordions\",                \"tables_tabs_and_accordions_button\",                subcontents_text_list = c(\"govTable\", \"govTabs\", \"accordions\", \"button_Input\"),                subcontents_id_list = c(NA, NA, NA, \"button_input_tables_tabs_accordions\")              ),                contents_link(                \"Cookies\",                \"cookies_button\"),             )          ),            shiny::column( width = 9,                          id = \"main_col\", # DO NOT REMOVE ID                          #Set up a nav panel so everything not on single page                         shiny::tabsetPanel(                           type = \"hidden\",                           id = \"tab-container\", # DO NOT REMOVE ID                            shiny::tabPanel(                             \"Text Types\",                             value = \"text_types\",                             gov_layout(                               size = \"two-thirds\",                               backlink_Input(\"back1\"),                               heading_text(\"Page 2\", size = \"l\"),                               label_hint(\"label2\", \"These are some examples of the types of user                         text inputs that you can use\"),                               heading_text(\"date_Input\", size = \"s\"),                               date_Input(                                 inputId = \"date1\",                                 label = \"What is your date of birth?\",                                 hint_label = \"For example, 31 3 1980\"),                               heading_text(\"text_Input\", size = \"s\"),                               text_Input(inputId = \"txt1\", label = \"Event name\"),                               heading_text(\"text_area_Input\", size = \"s\"),                               text_area_Input(                                 inputId = \"text_area1\",                                 label = \"Can you provide more detail?\",                                 hint_label = \"Do not include personal or financial information,                like your National Insurance number or credit card details.\"),                               text_area_Input(                                 inputId = \"text_area2\",                                 label = \"How are you today?\",                                 hint_label = \"Leave blank to trigger error\",                                 error = T,                                 error_message = \"Please do not leave blank\",                                 word_limit = 300),                               heading_text(                               \"button_Input\", size = \"s\",                               id = \"button_input_text_types\"),                               button_Input(\"btn2\", \"Go to next page\"),                               button_Input(\"btn3\", \"Check for errors\", type = \"warning\")                             )                           ),                            shiny::tabPanel(                             \"Tables, tabs and accordions\",                             value = \"tables_tabs_and_accordions\",                             gov_layout(                             size = \"two-thirds\",                               backlink_Input(\"back2\"),                               heading_text(\"Page 3\", size = \"l\"),                               label_hint(\"label3\", \"These are some examples of using tabs and                             tables\"),                               heading_text(\"govTable\", size = \"s\"),                               heading_text(\"govTabs\", size = \"s\"),                               heading_text(\"accordions\", size = \"s\"),                               shinyGovstyle::  accordion(                                 \"acc1\",                                 c(\"Writing well for the web\",                                   \"Writing well for specialists\",                                   \"Know your audience\",                                   \"How people read\"                                 ),                                 c(\"This is the content for Writing well for the web.\",                                   \"This is the content for Writing well for specialists.\",                                   \"This is the content for Know your audience.\",                                   \"This is the content for How people read.\"                                 )),                                heading_text(                               \"button_Input\", size = \"s\",                                id = \"button_input_tables_tabs_accordions\"),                               button_Input(\"btn4\", \"Go to next page\"),                             )                           ),                             #####################Create cookie panel################################                           shiny::tabPanel(                             \"Cookies\",                             value = \"panel-cookies\",                             gov_layout(                               size = \"two-thirds\",                               heading_text(\"Cookie page\", size = \"l\"),                               label_hint(\"label-cookies\", \"This an example cookie page that could be                             expanded\")                             )                           )))          ), #end of gov row         footer(TRUE)        ) #end of fluid page       server <- function(input, output, session) {          # Tab nav        shiny::observeEvent(input$back2, {          shiny::updateTabsetPanel(session, \"tab-container\", selected = \"text_types\")        })         shiny::observeEvent(input$tables_tabs_and_accordions_button, {          shiny::updateTabsetPanel(session, \"tab-container\", selected = \"tables_tabs_and_accordions\")        })         shiny::observeEvent(input$cookies_button, {          shiny::updateTabsetPanel(session, \"tab-container\", selected = \"panel-cookies\")        })       }    shiny::shinyApp(ui = ui, server = server) }"},{"path":"/reference/cookieBanner.html","id":null,"dir":"Reference","previous_headings":"","what":"Cookie Banner Function — cookieBanner","title":"Cookie Banner Function — cookieBanner","text":"function creates cookie banner. need shinyjs::useShinyjs() enabled work.  ids pre set.  See example structure.","code":""},{"path":"/reference/cookieBanner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cookie Banner Function — cookieBanner","text":"","code":"cookieBanner(service_name)"},{"path":"/reference/cookieBanner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cookie Banner Function — cookieBanner","text":"service_name Name service add banner","code":""},{"path":"/reference/cookieBanner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cookie Banner Function — cookieBanner","text":"cookie banner html shiny object.","code":""},{"path":"/reference/cookieBanner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cookie Banner Function — cookieBanner","text":"","code":"if (interactive()) { ui <- fluidPage(   shinyGovstyle::header(     main_text = \"Example\",     secondary_text = \"User Examples\",     logo=\"shinyGovstyle/images/moj_logo.png\"),   #Needs shinyjs to work   shinyjs::useShinyjs(),   shinyGovstyle::cookieBanner(\"The best thing\"),   shinyGovstyle::gov_layout(size = \"two-thirds\"),   shinyGovstyle::footer(full = TRUE) )  server <- function(input, output, session) {    #Need these set of observeEvent to create a path through the cookie banner   observeEvent(input$cookieAccept, {     shinyjs::show(id = \"cookieAcceptDiv\")     shinyjs::hide(id = \"cookieMain\")   })    observeEvent(input$cookieReject, {     shinyjs::show(id = \"cookieRejectDiv\")     shinyjs::hide(id = \"cookieMain\")   })    observeEvent(input$hideAccept, {     shinyjs::toggle(id = \"cookieDiv\")   })    observeEvent(input$hideReject, {     shinyjs::toggle(id = \"cookieDiv\")   })    observeEvent(input$cookieLink, {     #Need to link here to where further info is located.  You can use     #updateTabsetPanel to have a cookie page for instance   })  } shinyApp(ui = ui, server = server) }"},{"path":"/reference/date_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Date Input Function — date_Input","title":"Date Input Function — date_Input","text":"function create date input follows GDS component","code":""},{"path":"/reference/date_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date Input Function — date_Input","text":"","code":"date_Input(   inputId,   label,   hint_label = NULL,   error = FALSE,   error_message = NULL,   day = NULL,   month = NULL,   year = NULL )"},{"path":"/reference/date_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date Input Function — date_Input","text":"inputId input slot used access value. label Display label control, NULL label. hint_label Display hint label control, NULL hint label. error Whenever include error components.Defaults FALSE. error_message Error handling message? Defaults NULL day Select default day start . Defaults NULL month Select default month start . Defaults NULL year Select default year start . Defaults NULL","code":""},{"path":"/reference/date_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date Input Function — date_Input","text":"data input html shiny object","code":""},{"path":"/reference/date_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date Input Function — date_Input","text":"","code":"if (interactive()) {    ui <- fluidPage(     # Required for error handling function.     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",        # Simple date input       shinyGovstyle::date_Input(         inputId = \"dob_input\",         label = \"Please enter your birthday\"),        # Error date input        shinyGovstyle::date_Input(          inputId = \"dob_input2\",          label = \"Please enter your birthday\",          hint_label = \"For example, 12 11 2007\",          error = TRUE),        # Button to trigger error        shinyGovstyle::button_Input(inputId = \"submit\", label = \"Submit\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {     #'Trigger error on blank submit of dob_input2     observeEvent(input$submit, {       if (input$dob_input2 == \"//\"){         shinyGovstyle::error_on(inputId = \"dob_input2\")       } else {         shinyGovstyle::error_off(           inputId = \"dob_input2\")       }     })   }   shinyApp(ui = ui, server = server) }"},{"path":"/reference/details.html","id":null,"dir":"Reference","previous_headings":"","what":"Details Function — details","title":"Details Function — details","text":"function create detail component can click details.","code":""},{"path":"/reference/details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Details Function — details","text":"","code":"details(inputId, label, help_text)"},{"path":"/reference/details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Details Function — details","text":"inputId input slot used access value. label Main label text help_text Additional help information component.","code":""},{"path":"/reference/details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Details Function — details","text":"details box html shiny object","code":""},{"path":"/reference/details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Details Function — details","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::details(         inputId = \"help_div\",         label = \"Help with form\",         help_text = \"To complete the form you need to fill it in...\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/error_off.html","id":null,"dir":"Reference","previous_headings":"","what":"Error off Function — error_off","title":"Error off Function — error_off","text":"function turns error o component, issues sorted.","code":""},{"path":"/reference/error_off.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error off Function — error_off","text":"","code":"error_off(inputId)"},{"path":"/reference/error_off.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error off Function — error_off","text":"inputId inputId turn error handling iff .","code":""},{"path":"/reference/error_off.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error off Function — error_off","text":"return value.  toggles error css","code":""},{"path":"/reference/error_off.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error off Function — error_off","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {    ui <- fluidPage(     # Required for error handling function     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",       # Error text box       shinyGovstyle::text_Input(         inputId = \"eventId\",         label = \"Event Name\",         error = TRUE),       # Button to trigger error       shinyGovstyle::button_Input(inputId = \"submit\", label = \"Submit\")     ),     shinyGovstyle::footer(full = TRUE)   )     server <- function(input, output, session) {     #Trigger error on blank submit of eventId2     observeEvent(input$submit, {       if (input$eventId != \"\"){         shinyGovstyle::error_off(inputId = \"eventId\")       } else {         shinyGovstyle::error_on(           inputId = \"eventId\",           error_message = \"Please complete\")       }     })   }    # Run the application   shinyApp(ui = ui, server = server) }"},{"path":"/reference/error_on.html","id":null,"dir":"Reference","previous_headings":"","what":"Error on Function — error_on","title":"Error on Function — error_on","text":"function turns error o component.  Can used validate inputs.","code":""},{"path":"/reference/error_on.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error on Function — error_on","text":"","code":"error_on(inputId, error_message = NULL)"},{"path":"/reference/error_on.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error on Function — error_on","text":"inputId input id turn error . error_message want add additional error message. Defaults NULL, showing original designed error message","code":""},{"path":"/reference/error_on.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error on Function — error_on","text":"return value.  toggles error css","code":""},{"path":"/reference/error_on.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error on Function — error_on","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {    ui <- fluidPage(     # Required for error handling function     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",       # Error text box       shinyGovstyle::text_Input(         inputId = \"eventId\",         label = \"Event Name\",         error = TRUE),       # Button to trigger error       shinyGovstyle::button_Input(inputId = \"submit\", label = \"Submit\")     ),     shinyGovstyle::footer(full = TRUE)   )     server <- function(input, output, session) {     #Trigger error on blank submit of eventId2     observeEvent(input$submit, {       if (input$eventId != \"\"){         shinyGovstyle::error_off(inputId = \"eventId\")       } else {         shinyGovstyle::error_on(           inputId = \"eventId\",           error_message = \"Please complete\")       }     })   }    # Run the application   shinyApp(ui = ui, server = server) }"},{"path":"/reference/error_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Error Summary Function — error_summary","title":"Error Summary Function — error_summary","text":"function loads error summary component display error text. replicates gov style error boxes linked : https://design-system.service.gov.uk/components/error-summary/","code":""},{"path":"/reference/error_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error Summary Function — error_summary","text":"","code":"error_summary(inputId, error_title, error_list)"},{"path":"/reference/error_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error Summary Function — error_summary","text":"inputId input slot used access value. error_title title error summary. error_list list text values displayed error body.","code":""},{"path":"/reference/error_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error Summary Function — error_summary","text":"error_summary html shiny object","code":""},{"path":"/reference/error_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error Summary Function — error_summary","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo = \"shinyGovstyle/images/moj_logo.png\"     ),     shinyGovstyle::gov_layout(       size = \"two-thirds\",       error_summary(         inputId = \"errorId\",         error_title = \"Error title\",         error_list = c(\"error item1\", \"error item2\")       )     ),     shinyGovstyle::button_Input(\"btn1\", \"Change error summary\"),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {      shiny::observeEvent(input$btn1, {       error_summary_update(         \"errorId\",         c(\"error item1\", \"error item2\", \"error item3\")       )},       ignoreInit = TRUE     )   }   shinyApp(ui = ui, server = server) }"},{"path":"/reference/error_summary_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Error Summary Update Function — error_summary_update","title":"Error Summary Update Function — error_summary_update","text":"function changes text displays error summary box. Requires shinyjs::useShinyjs() work.","code":""},{"path":"/reference/error_summary_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error Summary Update Function — error_summary_update","text":"","code":"error_summary_update(inputId, error_list)"},{"path":"/reference/error_summary_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error Summary Update Function — error_summary_update","text":"inputId inputid error summary want update error_list updated list text values displayed error body.","code":""},{"path":"/reference/error_summary_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error Summary Update Function — error_summary_update","text":"update error summary box","code":""},{"path":"/reference/error_summary_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error Summary Update Function — error_summary_update","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo = \"shinyGovstyle/images/moj_logo.png\"     ),     shinyGovstyle::gov_layout(       size = \"two-thirds\",       error_summary(         inputId = \"errorId\",         error_title = \"Error title\",         error_list = c(\"error item1\", \"error item2\")       )     ),     shinyGovstyle::button_Input(\"btn1\", \"Change error summary\"),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {      shiny::observeEvent(input$btn1, {       error_summary_update(         \"errorId\",         c(\"error item1\", \"error item2\", \"error item3\")       )},       ignoreInit = TRUE     )   }   shinyApp(ui = ui, server = server) }"},{"path":"/reference/file_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"File Input Function — file_Input","title":"File Input Function — file_Input","text":"function create file upload component.  uses basis shiny fileInput function, restyles label adds error onto . look like www.gov.uk/ style one, although www.gov.uk/ seem settle style , example changes Firefox Chrome","code":""},{"path":"/reference/file_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Input Function — file_Input","text":"","code":"file_Input(   inputId,   label,   multiple = FALSE,   accept = NULL,   width = NULL,   buttonLabel = \"Choose file\",   placeholder = \"No file chosen\",   error = FALSE,   error_message = NULL )"},{"path":"/reference/file_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Input Function — file_Input","text":"inputId input slot used access value. label Display label control, NULL label. multiple Whether user allowed select upload multiple files . work older browsers, including Internet Explorer 9 earlier. accept character vector MIME types; gives browser hint kind files server expecting. width width input,  e.g. '400px', '100%' buttonLabel label used button. Can text HTML tag object. placeholder text show file uploaded. error Whenever icnlud error handling  Defaults FALSE. error_message Message display error.  Defaults NULL","code":""},{"path":"/reference/file_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File Input Function — file_Input","text":"file input html shiny object","code":""},{"path":"/reference/file_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Input Function — file_Input","text":"","code":"if (interactive()) {   ui <- fluidPage(     # Required for error handling function     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(     inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",       # Simple file input       shinyGovstyle::file_Input(inputId = \"file1\", label = \"Upload a file\"),       # Error file       shinyGovstyle::file_Input(         inputId = \"file2\",         label = \"Upload a file\",         error = TRUE),       # Button to trigger error       shinyGovstyle::button_Input(inputId = \"submit\", label = \"Submit\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {     #'Trigger error on blank submit of file2     observeEvent(input$submit, {       if (is.null(input$file2)){         shinyGovstyle::error_on(inputId = \"file2\")       } else {         shinyGovstyle::error_off(           inputId = \"file2\")       }     })   }   shinyApp(ui = ui, server = server) }"},{"path":"/reference/font.html","id":null,"dir":"Reference","previous_headings":"","what":"Font Function — font","title":"Font Function — font","text":"function adds rge nta fonts app. See https://design-system.service.gov.uk/styles/typography/ allowed.","code":""},{"path":"/reference/font.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Font Function — font","text":"","code":"font()"},{"path":"/reference/font.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Font Function — font","text":"value returned.  loads font css file","code":""},{"path":"/reference/font.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Font Function — font","text":"","code":"if (interactive()) {    ui <- fluidPage(     font(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\")   )    server <- function(input, output, session) {}    shinyApp(ui = ui, server = server) }"},{"path":"/reference/footer.html","id":null,"dir":"Reference","previous_headings":"","what":"Footer Function — footer","title":"Footer Function — footer","text":"function create gov style footer page","code":""},{"path":"/reference/footer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Footer Function — footer","text":"","code":"footer(full = FALSE)"},{"path":"/reference/footer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Footer Function — footer","text":"full Whenever want blank footer official gov version. Defaults FALSE","code":""},{"path":"/reference/footer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Footer Function — footer","text":"footer html shiny object","code":""},{"path":"/reference/footer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Footer Function — footer","text":"","code":"if (interactive()) {    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     tags$br(),     tags$br(),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}    shinyApp(ui = ui, server = server) }"},{"path":"/reference/govTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Function — govTable","title":"Table Function — govTable","text":"function inserts gov styled table.  Format header looking rows columns","code":""},{"path":"/reference/govTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Function — govTable","text":"","code":"govTable(   inputId,   df,   caption,   caption_size = \"l\",   num_col = NULL,   width_overwrite = NULL )"},{"path":"/reference/govTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Function — govTable","text":"inputId Input id table df expects dataframe create table caption adds caption table header caption_size adjust size caption.  Options s, m, l, xl, l default num_col adds numeric class format columns. width_overwrite change width.  Need include width every column. Options three-quarters, two-thirds, one-half, one-third, one-quarter. Default NULL.","code":""},{"path":"/reference/govTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table Function — govTable","text":"table html shiny object","code":""},{"path":"/reference/govTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Function — govTable","text":"","code":"if (interactive()) {    Months <- c(\"January\", \"February\", \"March\")   Bikes <- c(\"£85\", \"£75\", \"£165\")   Cars <- c(\"£95\", \"£55\", \"£125\")    example_data <- data.frame(Months, Bikes, Cars)    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",     shinyGovstyle::govTable(       \"tab1\", example_data, \"Test\", \"l\", num_col = c(2,3),       width_overwrite = c(\"one-half\", \"one-quarter\", \"one-quarter\"))     ),      shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}    shinyApp(ui = ui, server = server) }"},{"path":"/reference/govTabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabs Function — govTabs","title":"Tabs Function — govTabs","text":"function creates tabs based table.  requires single dataframe grouping variable","code":""},{"path":"/reference/govTabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabs Function — govTabs","text":"","code":"govTabs(inputId, df, group_col)"},{"path":"/reference/govTabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabs Function — govTabs","text":"inputId id access tag df single dataframe data.  See example structure. group_col column name groups used tabs","code":""},{"path":"/reference/govTabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabs Function — govTabs","text":"tab table html shiny object.","code":""},{"path":"/reference/govTabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabs Function — govTabs","text":"","code":"if (interactive()) {    # Create an example dataset   tabs <- c(rep(\"Past Day\", 3),             rep(\"Past Week\", 3),             rep(\"Past Month\", 3),             rep(\"Past Year\", 3))   Case_manager <- rep(c(\"David Francis\", \"Paul Farmer\", \"Rita Patel\"),4)   Cases_open <- c(3, 1, 2, 24, 16, 24, 98, 122, 126, 1380, 1129, 1539)   Cases_closed <- c(0, 0, 0, 18, 20, 27, 95, 131, 142, 1472, 1083, 1265)   data <- data.frame(tabs, Case_manager, Cases_open, Cases_closed)    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::govTabs(data, \"tabs\")),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/gov_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Page Layout Function — gov_layout","title":"Page Layout Function — gov_layout","text":"function loads page layout, work well `gov_main_layout` associated functions.  kept now simpler version grids needed.","code":""},{"path":"/reference/gov_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Page Layout Function — gov_layout","text":"","code":"gov_layout(..., inputID = \"main\", size = \"full\")"},{"path":"/reference/gov_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Page Layout Function — gov_layout","text":"... include components UI want within main page. inputID ID main div.  Defaults \"main\" size Layout page.  Optional full, one-half, two-thirds, one-third one-quarter.  Defaults \"full\"","code":""},{"path":"/reference/gov_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Page Layout Function — gov_layout","text":"html shiny layout div","code":""},{"path":"/reference/gov_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Page Layout Function — gov_layout","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"full\",       shinyGovstyle::panel_output(         inputId = \"panel1\",         main_text = \"Application Complete\",         sub_text = \"Thank you for submitting your application.         Your reference is xvsiq\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/gov_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabs Function — gov_summary","title":"Tabs Function — gov_summary","text":"function creates tabs based table.  requires single dataframe grouping variable","code":""},{"path":"/reference/gov_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabs Function — gov_summary","text":"","code":"gov_summary(inputId, headers, info, action = FALSE, border = TRUE)"},{"path":"/reference/gov_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabs Function — gov_summary","text":"inputId id access summary list headers input row headers value info summary information values table action whenever change link needed.  sets input value headers using lowercase underscore replace gaps. Default set FALSE border set table borders.  Default set TRUE","code":""},{"path":"/reference/gov_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabs Function — gov_summary","text":"summary list table html shiny object.","code":""},{"path":"/reference/gov_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabs Function — gov_summary","text":"","code":"if (interactive()) {    # Create an example dataset   headers <- c(\"Name\", \"Date of birth\", \"Contact information\", \"Contact details\")   info <- c(     \"Sarah Philips\",     \"5 January 1978\",     \"72 Guild Street <br> London <br> SE23 6FH\",     \"07700 900457 <br> sarah.phillips@example.com\")    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::gov_summary(\"sumID\", headers, info, action = FALSE)),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/header.html","id":null,"dir":"Reference","previous_headings":"","what":"Header Function — header","title":"Header Function — header","text":"function create header banner.  use top screen","code":""},{"path":"/reference/header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header Function — header","text":"","code":"header(   main_text,   secondary_text,   logo = NULL,   main_link = \"#\",   secondary_link = \"#\",   logo_width = 36,   logo_height = 32 )"},{"path":"/reference/header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header Function — header","text":"main_text Main text goes header secondary_text Secondary header supplement main text logo Add link logo apply header. Use crown use crown svg version gov uk. main_link Add link clicking main text secondary_link Add link clicking secondary header. logo_width Change logo size width css improve fit logo_height Change logo size height css improve fit","code":""},{"path":"/reference/header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Header Function — header","text":"header html shiny object","code":""},{"path":"/reference/header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Header Function — header","text":"","code":"if (interactive()) {    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\")   )    server <- function(input, output, session) {}    shinyApp(ui = ui, server = server) }"},{"path":"/reference/heading_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Heading Text Function — heading_text","title":"Heading Text Function — heading_text","text":"function create heading text","code":""},{"path":"/reference/heading_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heading Text Function — heading_text","text":"","code":"heading_text(text_input, size = \"xl\", id)"},{"path":"/reference/heading_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heading Text Function — heading_text","text":"text_input Text display size Text size using xl, l, m, s.  Defaults xl. id Custom header id","code":""},{"path":"/reference/heading_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heading Text Function — heading_text","text":"heading text html shiny object","code":""},{"path":"/reference/heading_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heading Text Function — heading_text","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::heading_text(\"This is great text\", \"m\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/input_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Input Field Function — input_field","title":"Input Field Function — input_field","text":"function inserts number text inputs. Useful addresses.","code":""},{"path":"/reference/input_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input Field Function — input_field","text":"","code":"input_field(   legend,   labels,   inputIds,   widths = NULL,   types = \"text\",   error = FALSE,   error_message = NULL )"},{"path":"/reference/input_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input Field Function — input_field","text":"legend Legend goes fieldset labels list labels text inputs inputIds list input slots used access value. widths control size box based number characters required.  Options 30, 20, 10, 5, 4, 3, 2.  NULL limit size types text box types.  default text. error Whenever icnlud error handling  Defaults FALSE. error_message Message display error.  Defaults NULL","code":""},{"path":"/reference/input_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Input Field Function — input_field","text":"input field html shiny object","code":""},{"path":"/reference/input_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Input Field Function — input_field","text":"","code":"if (interactive()) {    ui <- fluidPage(     # Required for error handling function     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::input_field(         legend =\"List of three text boxes in a field\",         labels = c(\"Field 1\", \"Field 2\", \"Field 3\"),         inputIds = c(\"field1\", \"field2\", \"field3\"),         widths = c(30,20,10),         error = TRUE),      # Button to trigger error      shinyGovstyle::button_Input(inputId = \"submit\", label = \"Submit\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {     # Trigger error on blank submit of field2     observeEvent(input$submit, {       if (input$field2 == \"\"){         shinyGovstyle::error_on(inputId = \"field2\",                                 error_message = \"Please complete\")       } else {         shinyGovstyle::error_off(           inputId = \"field2\")       }     })   }   shinyApp(ui = ui, server = server) }"},{"path":"/reference/insert_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert Text Function — insert_text","title":"Insert Text Function — insert_text","text":"function loads insert text component display additional information special format.","code":""},{"path":"/reference/insert_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert Text Function — insert_text","text":"","code":"insert_text(inputId, text)"},{"path":"/reference/insert_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert Text Function — insert_text","text":"inputId input slot used access value. text Text want display insert","code":""},{"path":"/reference/insert_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert Text Function — insert_text","text":"insert text html shiny object","code":""},{"path":"/reference/insert_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert Text Function — insert_text","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::insert_text(         inputId = \"note\",         text = \"It can take up to 8 weeks to register a lasting power of                 attorney if there are no mistakes in the application.\"       )     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/label_hint.html","id":null,"dir":"Reference","previous_headings":"","what":"Label with Hint Function — label_hint","title":"Label with Hint Function — label_hint","text":"function inserts label optional hint","code":""},{"path":"/reference/label_hint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label with Hint Function — label_hint","text":"","code":"label_hint(inputId, label, hint_input = NULL)"},{"path":"/reference/label_hint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label with Hint Function — label_hint","text":"inputId input slot used access value. label Display label control, NULL label. hint_input Display hint label control, NULL hint label.","code":""},{"path":"/reference/label_hint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label with Hint Function — label_hint","text":"label hint html shiny object","code":""},{"path":"/reference/label_hint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label with Hint Function — label_hint","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       label_hint(         inputId = \"label1\",         label = \"This is a label\",         hint_input = \"This is a hint\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/layouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Page Layout Functions — layouts","title":"Page Layout Functions — layouts","text":"function loads page layout gov layout.  selection components can sit within .  gov_main_layout overarching layout.  gov_row creates row gov_box creates box within row.  gov_text container text bodies.","code":""},{"path":"/reference/layouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Page Layout Functions — layouts","text":"","code":"gov_main_layout(..., inputID = \"main\")  gov_row(...)  gov_box(..., size = \"full\")  gov_text(...)"},{"path":"/reference/layouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Page Layout Functions — layouts","text":"... include components UI want within main page.  components made flow .  See example inputID ID main div.  Defaults \"main\" size size box row.  Optional full, one-half, two-thirds, one-third one-quarter.  Defaults \"full\"","code":""},{"path":"/reference/layouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Page Layout Functions — layouts","text":"html shiny layout div","code":""},{"path":"/reference/layouts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Page Layout Functions — layouts","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_main_layout(       shinyGovstyle::gov_row(         shinyGovstyle::gov_box(           size = \"full\",           shinyGovstyle::gov_text(\"govuk-grid-column-full\")         )       ),       shinyGovstyle::gov_row(         shinyGovstyle::gov_box(           size = \"one-half\",           shinyGovstyle::gov_text(\"govuk-grid-column-one-half\")         ),         shinyGovstyle::gov_box(           size = \"one-half\",           shinyGovstyle::gov_text(\"govuk-grid-column-one-half\")         )       ),       shinyGovstyle::gov_row(         shinyGovstyle::gov_box(           size = \"one-third\",           shinyGovstyle::gov_text(\"govuk-grid-column-one-third\")         ),         shinyGovstyle::gov_box(           size = \"two-third\",           shinyGovstyle::gov_text(\"govuk-grid-column-two-third\")         )       ),       shinyGovstyle::gov_row(         shinyGovstyle::gov_box(           size = \"one-quarter\",           shinyGovstyle::gov_text(\"govuk-grid-column-one-quarter\")         ),         shinyGovstyle::gov_box(           size = \"three-quarters\",           shinyGovstyle::gov_text(\"govuk-grid-column-three-quarters\")         )       )     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/noti_banner.html","id":null,"dir":"Reference","previous_headings":"","what":"Notification Banner Function — noti_banner","title":"Notification Banner Function — noti_banner","text":"function create notification banner","code":""},{"path":"/reference/noti_banner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Notification Banner Function — noti_banner","text":"","code":"noti_banner(   inputId,   title_txt = \"Important\",   body_txt = NULL,   type = \"standard\" )"},{"path":"/reference/noti_banner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Notification Banner Function — noti_banner","text":"inputId input id banner title_txt wording appears title body_txt wording appears banner body type type banner.  Options standard success. Standard default","code":""},{"path":"/reference/noti_banner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Notification Banner Function — noti_banner","text":"notification html shiny object","code":""},{"path":"/reference/noti_banner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Notification Banner Function — noti_banner","text":"","code":"if (interactive()) {    ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::noti_banner(       inputId = \"banner\", title_txt = \"Important\", body_txt = \"Example text\")   )    server <- function(input, output, session) {}    shinyApp(ui = ui, server = server) }"},{"path":"/reference/panel_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel output — panel_output","title":"Panel output — panel_output","text":"function inserts panel.  Normally used confirmation screens","code":""},{"path":"/reference/panel_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel output — panel_output","text":"","code":"panel_output(inputId, main_text, sub_text)"},{"path":"/reference/panel_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel output — panel_output","text":"inputId input slot used access value. main_text Add header panel sub_text Add main body text panel","code":""},{"path":"/reference/panel_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel output — panel_output","text":"panel html shiny object","code":""},{"path":"/reference/panel_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel output — panel_output","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"full\",       shinyGovstyle::panel_output(         inputId = \"panel1\",         main_text = \"Application Complete\",         sub_text = \"Thank you for submitting your application.                     Your reference is xvsiq\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"/reference/radio_button_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Radio Button Function — radio_button_Input","title":"Radio Button Function — radio_button_Input","text":"function create radio buttons","code":""},{"path":"/reference/radio_button_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radio Button Function — radio_button_Input","text":"","code":"radio_button_Input(   inputId,   label,   choices = NULL,   selected = NULL,   inline = FALSE,   small = FALSE,   choiceNames = NULL,   choiceValues = NULL,   hint_label = NULL,   error = FALSE,   error_message = NULL,   custom_class = \"\" )"},{"path":"/reference/radio_button_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radio Button Function — radio_button_Input","text":"inputId input slot used access value. label Input label. choices List values select (elements list named name rather value displayed user) selected initially selected value. inline want radio inline ,  Default FALSE small want smaller versions radio buttons,  Default FALSE choiceNames, choiceValues checkboxGroupInput. List names values, respectively, displayed user app correspond choice (reason must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. hint_label Additional hint text may want display label.  Defaults NULL error Whenever want include error handle component. error_message want default error message. custom_class want add additional classes radio buttons","code":""},{"path":"/reference/radio_button_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radio Button Function — radio_button_Input","text":"radio buttons html shiny object","code":""},{"path":"/reference/radio_button_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radio Button Function — radio_button_Input","text":"","code":"if (interactive()) {    ui <- fluidPage(     # Required for error handling function     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",       #Simple radio       shinyGovstyle::radio_button_Input(         inputId = \"radio1\",         choices = c(\"Yes\", \"No\", \"Maybe\"),         label = \"Choice option\"),       # Error radio       shinyGovstyle::radio_button_Input(         inputId = \"radio2\",         choices = c(\"Yes\", \"No\", \"Maybe\"),         label = \"Choice option\",         hint_label = \"Select the best fit\",         inline = TRUE,         error = TRUE,         error_message = \"Select one\"),       # Button to trigger error       shinyGovstyle::button_Input(inputId = \"submit\", label = \"Submit\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {     #Trigger error on blank submit of eventId2     observeEvent(input$submit, {       if (is.null(input$radio2)){         shinyGovstyle::error_on(inputId = \"radio2\")       } else {         shinyGovstyle::error_off(           inputId = \"radio2\")       }     })   }   shinyApp(ui = ui, server = server) }"},{"path":"/reference/run_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Function — run_example","title":"Example Function — run_example","text":"function runs shiny example using different parts package","code":""},{"path":"/reference/run_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Function — run_example","text":"","code":"run_example()"},{"path":"/reference/run_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example Function — run_example","text":"shiny app examples ","code":""},{"path":"/reference/run_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Function — run_example","text":"","code":"if (interactive()) { run_example() }"},{"path":"/reference/select_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Function — select_Input","title":"Select Function — select_Input","text":"function inserts select box","code":""},{"path":"/reference/select_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Function — select_Input","text":"","code":"select_Input(inputId, label, select_text, select_value)"},{"path":"/reference/select_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Function — select_Input","text":"inputId Input id component label Insert text label. select_text Add text apply drop list select_value Add value used selection.","code":""},{"path":"/reference/select_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Function — select_Input","text":"select input html shiny object","code":""},{"path":"/reference/select_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Function — select_Input","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"full\",       select_Input(         inputId = \"sorter\",         label = \"Sort by\",         select_text = c(\"Recently published\",                         \"Recently updated\",                         \"Most views\",                         \"Most comments\"),         select_value = c(\"published\", \"updated\", \"view\", \"comments\")),         tags$br()     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/skip_to_main.html","id":null,"dir":"Reference","previous_headings":"","what":"Skip to main content link — skip_to_main","title":"Skip to main content link — skip_to_main","text":"function generates accessible 'Skip main content' link, typically used keyboard-users bypass content navigate directly main content page. Important: main column need id \"main_col\" work","code":""},{"path":"/reference/skip_to_main.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skip to main content link — skip_to_main","text":"","code":"skip_to_main()"},{"path":"/reference/skip_to_main.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skip to main content link — skip_to_main","text":"skip button skips section id \"main_col\"","code":""},{"path":"/reference/skip_to_main.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skip to main content link — skip_to_main","text":"","code":"if (interactive()) {   ui <- fluidPage(     cookieBanner(\"Run Example\"),     skip_to_main(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"     ),     shinyjs::useShinyjs(),  # shinyjs is needed to manage visibility of elements     gov_row(     shiny::column(     width = 3,     id = \"nav\",     # Contents box      shiny::tags$div(        id = \"govuk-contents-box\", #DO NOT REMOVE ID        class = \"govuk-contents-box\",  #DO NOT REMOVE CLASS        shiny::tags$h2(\"Contents\"),        p(\"Your contents links go here\"),      )     ),      shiny::column(     width = 9,     id = \"main_col\",     shiny::tabsetPanel(      type = \"hidden\",      id = \"tab-container\", # DO NOT REMOVE ID      shiny::tabPanel(        \"Your main content\",        value = \"your_main_content\",          gov_layout(            size = \"two-thirds\",            heading_text(\"Your main content\", size = \"l\"),            heading_text(\"accordions\", size = \"s\"),            shinyGovstyle::  accordion(              \"acc1\",              c(\"Writing well for the web\",                \"Writing well for specialists\",                \"Know your audience\",                \"How people read\"              ),              c(\"This is the content for Writing well for the web.\",                \"This is the content for Writing well for specialists.\",                \"This is the content for Know your audience.\",                \"This is the content for How people read.\"              )),           )        )      )    )  ) )   server <- function(input, output, session){   }   shinyApp(ui = ui, server = server)  }"},{"path":"/reference/subcontents_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Subcontents links function This function is used internally within contents_link to create links to headings within pages. — subcontents_links","title":"Subcontents links function This function is used internally within contents_link to create links to headings within pages. — subcontents_links","text":"Subcontents links function function used internally within contents_link create links headings within pages.","code":""},{"path":"/reference/subcontents_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subcontents links function This function is used internally within contents_link to create links to headings within pages. — subcontents_links","text":"","code":"subcontents_links(subcontents_text_list, subcontents_id_list)"},{"path":"/reference/subcontents_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subcontents links function This function is used internally within contents_link to create links to headings within pages. — subcontents_links","text":"subcontents_text_list vector link text subcontents subcontents_id_list vector link ids subcontents. pass NAs automatic matching id shinygovstyle::heading_text","code":""},{"path":"/reference/subcontents_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subcontents links function This function is used internally within contents_link to create links to headings within pages. — subcontents_links","text":"ol html shiny object","code":""},{"path":"/reference/subcontents_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subcontents links function This function is used internally within contents_link to create links to headings within pages. — subcontents_links","text":"","code":"if (interactive()) {   ui <- shiny::fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo = \"shinyGovstyle/images/moj_logo.png\"     ),     shiny::column(       width = 3,       id = \"nav\",       shiny::tags$div(         shiny::tags$h2(\"Contents\"),         subcontents_links(           c(\"radio_button_Input (inline)\", \"button_Input\"),           c(NA, NA)         ),         subcontents_links(           c(\"date_Input\", \"button_Input\"),           c(NA, \"button_input_text_types\")         )       )     )   )    server <- function(input, output, session) {   }   shiny::shinyApp(ui = ui, server = server) }"},{"path":"/reference/tag_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag Function — tag_Input","title":"Tag Function — tag_Input","text":"function creates tag","code":""},{"path":"/reference/tag_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag Function — tag_Input","text":"","code":"tag_Input(inputId, text, colour = \"navy\")"},{"path":"/reference/tag_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag Function — tag_Input","text":"inputId id access tag text text tag colour colour tag.  Default navy.  options grey, green, turquoise, blue, purple, pink, red, orange yellow","code":""},{"path":"/reference/tag_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag Function — tag_Input","text":"tag html shiny object.","code":""},{"path":"/reference/tag_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tag Function — tag_Input","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::tag_Input(\"tag1\", \"Complete\"),       shinyGovstyle::tag_Input(\"tag2\", \"Incomplete\", \"red\")),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/text_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Text Input Function — text_Input","title":"Text Input Function — text_Input","text":"function create text area input","code":""},{"path":"/reference/text_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text Input Function — text_Input","text":"","code":"text_Input(   inputId,   label,   hint_label = NULL,   type = \"text\",   width = NULL,   error = FALSE,   error_message = NULL,   prefix = NULL,   suffix = NULL )"},{"path":"/reference/text_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text Input Function — text_Input","text":"inputId input slot used access value. label Display label control, NULL label. hint_label Display hint label control, NULL hint label. type Type text input accept.  Defaults text. width control size box based number characters required.  Options 30, 20, 10, 5, 4, 3, 2.  NULL limit size error Whenever include error handling  Defaults FALSE. error_message Message display error.  Defaults NULL prefix Add prefix box.  Defaults NULL suffix Add suffix box.  Defaults NULL","code":""},{"path":"/reference/text_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Text Input Function — text_Input","text":"text input html shiny object","code":""},{"path":"/reference/text_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text Input Function — text_Input","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {    ui <- fluidPage(     # Required for error handling function     shinyjs::useShinyjs(),     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::banner(       inputId = \"banner\", type = \"beta\", 'This is a new service'),     shinyGovstyle::gov_layout(size = \"two-thirds\",       # Simple text box       shinyGovstyle::text_Input(inputId = \"eventId\", label = \"Event Name\"),       # Error text box       shinyGovstyle::text_Input(         inputId = \"eventId2\",         label = \"Event Name\",         hint_label = \"This can be found on the letter\",         error = TRUE),       # Button to trigger error       shinyGovstyle::button_Input(inputId = \"submit\", label = \"Submit\")     ),     shinyGovstyle::footer(full = TRUE)   )     server <- function(input, output, session) {     #Trigger error on blank submit of eventId2     observeEvent(input$submit, {       if (input$eventId2 != \"\"){         shinyGovstyle::error_off(inputId = \"eventId2\")       } else {         shinyGovstyle::error_on(           inputId = \"eventId2\",           error_message = \"Please complete\")       }     })   }    # Run the application   shinyApp(ui = ui, server = server) }"},{"path":"/reference/text_area_Input.html","id":null,"dir":"Reference","previous_headings":"","what":"Text Area Input Function — text_area_Input","title":"Text Area Input Function — text_area_Input","text":"function create text area input","code":""},{"path":"/reference/text_area_Input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text Area Input Function — text_area_Input","text":"","code":"text_area_Input(   inputId,   label,   hint_label = NULL,   row_no = 5,   error = FALSE,   error_message = NULL,   word_limit = NULL )"},{"path":"/reference/text_area_Input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text Area Input Function — text_area_Input","text":"inputId input slot used access value. label Display label control, NULL label. hint_label Display hint label control, NULL hint label. row_no Size text entry box.  Defaults 5. error Whenever icnlud error handling  Defaults FALSE error_message Message display error.  Defaults NULL word_limit Add word limit display.  Defaults NULL.","code":""},{"path":"/reference/text_area_Input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Text Area Input Function — text_area_Input","text":"text area box html shiny object","code":""},{"path":"/reference/text_area_Input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text Area Input Function — text_area_Input","text":"","code":"text_area_Input(\"taId\", \"Can you provide more detail?\", \"Do not include personal or financial information, like your National Insurance number or credit card details.\") #> <div class=\"govuk-form-group govuk-character-count\" id=\"taIddiv\"> #>   <label class=\"govuk-label\">Can you provide more detail?<\/label> #>   <div class=\"govuk-hint\">Do not include personal or financial information, like your #> National Insurance number or credit card details.<\/div> #>   <textarea id=\"taId\" class=\"govuk-textarea\" rows=\"5\"><\/textarea> #> <\/div>"},{"path":"/reference/value_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a value text box with optional description and colour — value_box","title":"Create a value text box with optional description and colour — value_box","text":"function generates value text box optional description customisable colour. text box can used Shiny applications display highlighted information, statistics key metrics.","code":""},{"path":"/reference/value_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a value text box with optional description and colour — value_box","text":"","code":"value_box(inputId, value = \"your value goes here\", text = NA, colour = \"blue\")"},{"path":"/reference/value_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a value text box with optional description and colour — value_box","text":"inputId Character. unique identifier value box element. value Character. primary value display value box. Defaults \"value goes \". text Character NA. optional description appear value. provided (default NA), description displayed.. colour Character. colour apply value box. Defaults \"blue\". Choose following: \"grey\", \"purple\", \"turquoise\", \"blue\", \"light-blue\", \"yellow\", \"orange\", \"red\", \"pink\", \"green\".","code":""},{"path":"/reference/value_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a value text box with optional description and colour — value_box","text":"Shiny `div` tag representing value box, styled according specified parameters.","code":""},{"path":"/reference/value_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a value text box with optional description and colour — value_box","text":"","code":"if (interactive()) {   ui <- fluidPage(     value_text(       inputId = \"value1\",       value = \"1,000,000\",       text = \"This is the latest value for the selected inputs.\",       colour = \"purple\"     )   )   server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/warning_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Warning Text Function — warning_text","title":"Warning Text Function — warning_text","text":"function create warning text","code":""},{"path":"/reference/warning_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warning Text Function — warning_text","text":"","code":"warning_text(inputId, text)"},{"path":"/reference/warning_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warning Text Function — warning_text","text":"inputId input slot used access value. text Text goes main","code":""},{"path":"/reference/warning_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warning Text Function — warning_text","text":"warning box html shiny object","code":""},{"path":"/reference/warning_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warning Text Function — warning_text","text":"","code":"if (interactive()) {   ui <- fluidPage(     shinyGovstyle::header(       main_text = \"Example\",       secondary_text = \"User Examples\",       logo=\"shinyGovstyle/images/moj_logo.png\"),     shinyGovstyle::gov_layout(size = \"two-thirds\",       shinyGovstyle::warning_text(         inputId = \"warn1\",         text = \"You can be fined up to £5,000 if you do not register.\")     ),     shinyGovstyle::footer(full = TRUE)   )    server <- function(input, output, session) {}   shinyApp(ui = ui, server = server) }"},{"path":"/reference/word_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Word Count Function — word_count","title":"Word Count Function — word_count","text":"function create tracks word count used text area function","code":""},{"path":"/reference/word_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Word Count Function — word_count","text":"","code":"word_count(inputId, input, word_limit = NULL)"},{"path":"/reference/word_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Word Count Function — word_count","text":"inputId input slot text area want affect input text input associated box. word_limit Change word limit needed.  Default keep used text area component","code":""},{"path":"/reference/word_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Word Count Function — word_count","text":"value returned. Updates word count shiny app","code":""},{"path":"/reference/word_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Word Count Function — word_count","text":"","code":"if (interactive()) {    ui <- shiny::fluidPage(   shinyjs::useShinyjs(),   shinyGovstyle::header(     \"Justice\", \"\", logo=\"shinyGovstyle/images/moj_logo.png\"),   gov_layout(size = \"full\",            text_area_Input(              inputId = \"text_area\",              label = \"Can you provide more detail?\",              hint_label =  \"Do not include personal or financial information                             , like your National Insurance number or credit                             card details.\",              word_limit = 300)   ),   footer(TRUE)   )    server <- function(input, output, session) {   shiny::observeEvent(input$text_area,                word_count(inputId = \"text_area\",                           input = input$text_area                )   )   }   shinyApp(ui = ui, server = server) }"},{"path":[]},{"path":"/news/index.html","id":"shinygovstyle-010","dir":"Changelog","previous_headings":"","what":"shinyGovstyle 0.1.0","title":"shinyGovstyle 0.1.0","text":"CRAN release: 2024-09-12 Update css v5.4.0 made fixes associated . longer requires rem remover step update future changes One major changes css change look functionality accordion. Show/hide works expected now. Another major change radio buttons look feel, line v5.4.0 design examples. Added additional functions run_example ease testing Added contents_links() function helper getting styling behaviour left navigation","code":""},{"path":"/news/index.html","id":"shinygovstyle-008","dir":"Changelog","previous_headings":"","what":"shinyGovstyle 0.0.8","title":"shinyGovstyle 0.0.8","text":"CRAN release: 2022-02-22 Update css v4.0.0 made fixes associated . One major changes css change look accordion. Added new functions gov_main_layout, gov_row, gov_box gov_text give better control layouts. Added tabs component using govTab command Added summary list component using gov_summary command Added error summary component (error_summary) error summary update (error_summary_update)","code":""},{"path":"/news/index.html","id":"shinygovstyle-007","dir":"Changelog","previous_headings":"","what":"shinyGovstyle 0.0.7","title":"shinyGovstyle 0.0.7","text":"CRAN release: 2021-11-04 Improved header can adjust logo size suit Fix errors appeared footer Fix word count function need enter word count limit text_area function. can change limit word_count needed. Change run_example better versions show ways can package. Change backlink_Input button can use server move panels etc. Added tags tag_Input function plus added use_example. Added cookie banner cookieBanner function. Added accordion accordion function. Added tables govTable function.","code":""},{"path":"/news/index.html","id":"shinygovstyle-006","dir":"Changelog","previous_headings":"","what":"shinyGovstyle 0.0.6","title":"shinyGovstyle 0.0.6","text":"CRAN release: 2021-10-25 Fix minor bugs issues list including data default radio default Added units test Added example function Added NEWS.md file track changes package. Added notification banner function Got ready CRAN release. Added output value documentation","code":""}]
