% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/footer.R
\name{footer}
\alias{footer}
\title{Footer Function}
\usage{
footer(full = FALSE, links = NULL)
}
\arguments{
\item{full}{Whenever you want to have blank footer or official gov version.
Defaults to \code{FALSE}}

\item{links}{A vector of actionLinks to be added to the footer, inputIDs
are auto-generated and are the snake case version of the link text, e.g.
"Accessibility Statement" will have an inputID of accessibility_statement}
}
\value{
a footer html shiny object
}
\description{
This function create a gov style footer for your page
}
\details{
You can add actionLinks as links in the footer through using the links_list
argument.

Links in the footer should be used sparingly and are usually for supporting
information pages such as the accessibility statement, privacy notice,
cookies information or link to a statement of voluntary adoption of the
statistics code of practice.

Generally when using footer links you will be controlling a hidden tabset
so to the end user it looks like it is a new page.
}
\examples{
if (interactive()) {
  ui <- fluidPage(
    shinyGovstyle::header(
      main_text = "Example",
      secondary_text = "User Examples",
      logo = "shinyGovstyle/images/moj_logo.png"
    ),
    shinyGovstyle::banner(
      inputId = "banner", type = "beta", "This is a new service"
    ),
    tags$br(),
    tags$br(),
    shinyGovstyle::footer(full = TRUE)
  )

  server <- function(input, output, session) {}

  shinyApp(ui = ui, server = server)
}

# Add links
footer(links = c("Accessibility statement", "Cookies"))

# Full app with link controlling a hidden tab
if (interactive()) {
  ui <- fluidPage(
    shinyGovstyle::header(
      main_text = "Example",
      secondary_text = "User Examples",
      logo = "shinyGovstyle/images/moj_logo.png"
    ),
    shinyGovstyle::banner(
      inputId = "banner", type = "beta", "This is a new service"
    ),
    shiny::tabsetPanel(
      type = "hidden",
      id = "tabs",
      shiny::tabPanel(
        "Main content",
        value = "main",
        heading_text("Hello world!")
      ),
      shiny::tabPanel(
        "Cookies",
        value = "cookies",
        heading_text("Cookies")
      )
    ),
    shinyGovstyle::footer(
      full = TRUE,
      links = c("Accessibility statement", "Cookies", "External link")
    )
  )

  server <- function(input, output, session) {
    shiny::observeEvent(input$cookies, {
      shiny::updateTabsetPanel(session, "tabs", selected = "cookies")
    })

   shiny::observeEvent(input$external_link, {
     showModal(modalDialog(
       external_link("https://shiny.posit.co/",
                     "External Link",
                     add_warning = FALSE
       ),
       easyClose = TRUE,
       footer = NULL
     ))

     # JavaScript to auto-click the link and close the modal
     shinyjs::runjs("
         setTimeout(function() {
           var link = document.querySelector('.modal a');
           if (link) {
             link.click();
             setTimeout(function() {
               $('.modal').modal('hide');
             }, 20); // Extra delay to avoid any race conditions
           }
        }, 400);
      ")
   })
  }

  shinyApp(ui = ui, server = server)
}
}
\keyword{footer}
